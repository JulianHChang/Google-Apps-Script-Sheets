In Google Apps Script, loops are used to repeat a block of code a number of times. There are several types of loops available: `for`, `for...in`, `for...of`, `while`, and `do...while`. Each loop is useful in different situations, depending on the type of data you're working with and the behavior you want to achieve.

Here’s an exhaustive list of examples for various types of looping structures in Apps Script:

---

### 1. **`for` Loop**
A `for` loop runs a block of code a set number of times, typically by iterating over an index.

#### Example 1.1: Basic `for` Loop

```javascript
function basicForLoop() {
  for (var i = 0; i < 5; i++) {
    Logger.log("Iteration: " + i);
  }
}
```

#### Example 1.2: Loop Over an Array

```javascript
function forLoopArray() {
  var arr = [10, 20, 30, 40, 50];
  for (var i = 0; i < arr.length; i++) {
    Logger.log("Array element at index " + i + ": " + arr[i]);
  }
}
```

#### Example 1.3: Loop with Step Increments

```javascript
function forLoopWithSteps() {
  for (var i = 0; i < 10; i += 2) {
    Logger.log("Value of i: " + i);
  }
}
```

---

### 2. **`for...in` Loop**
A `for...in` loop iterates over the properties of an object. It’s used when you want to loop through all the enumerable properties of an object.

#### Example 2.1: Loop Over Object Properties

```javascript
function forInLoopObject() {
  var person = {name: "Alice", age: 25, city: "New York"};
  
  for (var key in person) {
    if (person.hasOwnProperty(key)) {
      Logger.log(key + ": " + person[key]);
    }
  }
}
```

#### Example 2.2: Loop Over an Array with `for...in` (Not Recommended)

```javascript
function forInLoopArray() {
  var arr = [10, 20, 30, 40, 50];
  
  for (var index in arr) {
    Logger.log("Array element at index " + index + ": " + arr[index]);
  }
}
```
> **Note**: The `for...in` loop is not recommended for arrays because it can loop over inherited properties as well.

---

### 3. **`for...of` Loop**
The `for...of` loop is used to iterate over iterable objects like arrays, strings, Maps, and Sets. It’s typically used when you only need the values and not the keys.

#### Example 3.1: Loop Over an Array

```javascript
function forOfLoopArray() {
  var arr = [10, 20, 30, 40, 50];
  
  for (var value of arr) {
    Logger.log("Array value: " + value);
  }
}
```

#### Example 3.2: Loop Over a String

```javascript
function forOfLoopString() {
  var str = "Google";
  
  for (var char of str) {
    Logger.log("Character: " + char);
  }
}
```

#### Example 3.3: Loop Over a Map

```javascript
function forOfLoopMap() {
  var map = new Map();
  map.set("name", "Alice");
  map.set("age", 25);
  
  for (var [key, value] of map) {
    Logger.log(key + ": " + value);
  }
}
```

---

### 4. **`while` Loop**
The `while` loop runs as long as a specified condition evaluates to `true`. It’s commonly used when the number of iterations is unknown.

#### Example 4.1: Basic `while` Loop

```javascript
function basicWhileLoop() {
  var i = 0;
  
  while (i < 5) {
    Logger.log("Iteration: " + i);
    i++;
  }
}
```

#### Example 4.2: `while` Loop with Arrays

```javascript
function whileLoopArray() {
  var arr = [10, 20, 30, 40, 50];
  var i = 0;
  
  while (i < arr.length) {
    Logger.log("Array element at index " + i + ": " + arr[i]);
    i++;
  }
}
```

#### Example 4.3: Infinite `while` Loop with Break Condition

```javascript
function whileLoopWithBreak() {
  var i = 0;
  
  while (true) {
    Logger.log("Iteration: " + i);
    i++;
    
    if (i >= 5) {
      break;  // Exits the loop when i reaches 5
    }
  }
}
```

---

### 5. **`do...while` Loop**
The `do...while` loop is similar to the `while` loop, but it guarantees that the loop will run at least once since the condition is evaluated after the loop body.

#### Example 5.1: Basic `do...while` Loop

```javascript
function basicDoWhileLoop() {
  var i = 0;
  
  do {
    Logger.log("Iteration: " + i);
    i++;
  } while (i < 5);
}
```

#### Example 5.2: `do...while` Loop with Condition

```javascript
function doWhileLoopCondition() {
  var i = 5;
  
  do {
    Logger.log("Iteration: " + i);
    i++;
  } while (i < 5);  // Will run once even though the condition is false
}
```

---

### 6. **`forEach` Loop**
The `forEach` method is used to execute a function once for each array element. It is an easier way to loop through arrays without explicitly managing the index.

#### Example 6.1: Basic `forEach` Loop

```javascript
function forEachLoopArray() {
  var arr = [10, 20, 30, 40, 50];
  
  arr.forEach(function(value, index) {
    Logger.log("Array element at index " + index + ": " + value);
  });
}
```

#### Example 6.2: `forEach` Loop with Arrow Function

```javascript
function forEachLoopArrayArrow() {
  var arr = [10, 20, 30, 40, 50];
  
  arr.forEach((value, index) => Logger.log("Array element at index " + index + ": " + value));
}
```

---

### 7. **Nested Loops**
You can nest loops to iterate over multi-dimensional arrays or perform complex operations with multiple iterations.

#### Example 7.1: Nested `for` Loop

```javascript
function nestedForLoop() {
  var matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
  ];
  
  for (var i = 0; i < matrix.length; i++) {
    for (var j = 0; j < matrix[i].length; j++) {
      Logger.log("Element at [" + i + "][" + j + "]: " + matrix[i][j]);
    }
  }
}
```

---

### 8. **Breaking and Continuing in Loops**
You can use `break` to exit a loop early, or `continue` to skip an iteration of a loop.

#### Example 8.1: `break` Statement in a `for` Loop

```javascript
function breakInLoop() {
  for (var i = 0; i < 10; i++) {
    if (i === 5) {
      Logger.log("Breaking at 5");
      break;  // Exits the loop when i equals 5
    }
    Logger.log("Iteration: " + i);
  }
}
```

#### Example 8.2: `continue` Statement in a `for` Loop

```javascript
function continueInLoop() {
  for (var i = 0; i < 10; i++) {
    if (i === 5) {
      Logger.log("Skipping 5");
      continue;  // Skips the iteration when i equals 5
    }
    Logger.log("Iteration: " + i);
  }
}
```

#### Example 8.3: Using `break` in a `while` Loop

```javascript
function breakInWhileLoop() {
  var i = 0;
  
  while (i < 10) {
    if (i === 5) {
      Logger.log("Breaking at 5");
      break;  // Exits the loop when i equals 5
    }
    Logger.log("Iteration: " + i);
    i++;
  }
}
```

---

### 9. **`map` Method for Arrays**
The `map` method is not a traditional loop, but it iterates over each element of the array, applies a function to it, and returns a new array.

#### Example 9.1: Using `map` to Double Array Values

```javascript
function mapLoopArray() {
  var arr = [1, 2, 3, 4, 5];
  var doubled = arr.map(function(value) {
    return value * 2;
  });
  
  Logger.log("

Doubled array: " + doubled);
}
```

#### Example 9.2: `map` with Arrow Function

```javascript
function mapLoopArrayArrow() {
  var arr = [1, 2, 3, 4, 5];
  var doubled = arr.map(value => value * 2);
  
  Logger.log("Doubled array: " + doubled);
}
```

---

### Summary of Loop Types in Apps Script:

- **`for`**: Standard loop with control over the index.
- **`for...in`**: Used to loop over object properties (not ideal for arrays).
- **`for...of`**: Best for looping over iterable objects like arrays, strings, and maps.
- **`while`**: Loops until a condition is false.
- **`do...while`**: Guarantees at least one loop iteration before checking the condition.
- **`forEach`**: Simplifies looping over arrays.
- **Nested loops**: Useful for multi-dimensional structures.
- **`map`**: Functional way to loop over arrays and return a new array.
- **`break` and `continue`**: Control flow in loops, allowing for early exits or skipped iterations.

These examples cover almost every scenario for looping in Apps Script.