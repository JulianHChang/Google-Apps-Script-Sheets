In Google Apps Script, as in JavaScript (which Apps Script is based on), there is a distinction between **Pass by Value** and **Pass by Reference**. Understanding how these concepts work can help you control the behavior of your functions, especially when working with different types of variables like primitives (numbers, strings) and objects (arrays, objects).

Here are **exhaustive examples** demonstrating both **Pass by Value** and **Pass by Reference** in Apps Script.

---

### 1. **Pass by Value**

In **Pass by Value**, the actual value is passed to the function. Changes made to the parameter inside the function do **not affect** the original value outside the function. Primitive data types like numbers, strings, booleans, `null`, and `undefined` are passed by value.

#### Example 1.1: Passing Numbers (Pass by Value)

```javascript
function passByValueExample() {
  var num = 10;
  Logger.log("Before function call: " + num);  // Logs 10
  
  changeNumber(num);
  
  Logger.log("After function call: " + num);  // Logs 10 (unchanged)
}

function changeNumber(value) {
  value = 20;  // This change won't affect the original variable
  Logger.log("Inside function: " + value);  // Logs 20
}
```

#### Example 1.2: Passing Strings (Pass by Value)

```javascript
function passByValueString() {
  var text = "Hello";
  Logger.log("Before function call: " + text);  // Logs "Hello"
  
  changeString(text);
  
  Logger.log("After function call: " + text);  // Logs "Hello" (unchanged)
}

function changeString(value) {
  value = "World";  // This change won't affect the original variable
  Logger.log("Inside function: " + value);  // Logs "World"
}
```

#### Example 1.3: Passing Booleans (Pass by Value)

```javascript
function passByValueBoolean() {
  var bool = true;
  Logger.log("Before function call: " + bool);  // Logs true
  
  changeBoolean(bool);
  
  Logger.log("After function call: " + bool);  // Logs true (unchanged)
}

function changeBoolean(value) {
  value = false;  // This change won't affect the original variable
  Logger.log("Inside function: " + value);  // Logs false
}
```

---

### 2. **Pass by Reference**

In **Pass by Reference**, the reference to the actual data is passed to the function. Changes made to the parameter inside the function **do affect** the original data outside the function. Complex data types like arrays and objects are passed by reference.

#### Example 2.1: Passing Arrays (Pass by Reference)

```javascript
function passByReferenceArray() {
  var arr = [1, 2, 3];
  Logger.log("Before function call: " + arr);  // Logs [1, 2, 3]
  
  modifyArray(arr);
  
  Logger.log("After function call: " + arr);  // Logs [1, 2, 3, 4] (modified)
}

function modifyArray(arr) {
  arr.push(4);  // This modifies the original array
  Logger.log("Inside function: " + arr);  // Logs [1, 2, 3, 4]
}
```

#### Example 2.2: Passing Objects (Pass by Reference)

```javascript
function passByReferenceObject() {
  var person = {name: "John", age: 30};
  Logger.log("Before function call: " + JSON.stringify(person));  // Logs {"name":"John","age":30}
  
  modifyObject(person);
  
  Logger.log("After function call: " + JSON.stringify(person));  // Logs {"name":"John","age":35} (modified)
}

function modifyObject(obj) {
  obj.age = 35;  // This modifies the original object
  Logger.log("Inside function: " + JSON.stringify(obj));  // Logs {"name":"John","age":35}
}
```

#### Example 2.3: Modifying Arrays Without Affecting Original (Mimicking Pass by Value for Arrays)

Although arrays are passed by reference, you can prevent changes to the original array by creating a copy of the array within the function.

```javascript
function passByReferenceCopyArray() {
  var arr = [1, 2, 3];
  Logger.log("Before function call: " + arr);  // Logs [1, 2, 3]
  
  modifyArrayCopy([...arr]);  // Use the spread operator to create a shallow copy
  
  Logger.log("After function call: " + arr);  // Logs [1, 2, 3] (unchanged)
}

function modifyArrayCopy(arr) {
  arr.push(4);  // This modifies the copied array, not the original one
  Logger.log("Inside function: " + arr);  // Logs [1, 2, 3, 4]
}
```

#### Example 2.4: Modifying Objects Without Affecting Original (Mimicking Pass by Value for Objects)

You can also create a copy of an object to avoid modifying the original object.

```javascript
function passByReferenceCopyObject() {
  var person = {name: "John", age: 30};
  Logger.log("Before function call: " + JSON.stringify(person));  // Logs {"name":"John","age":30}
  
  modifyObjectCopy(Object.assign({}, person));  // Creates a shallow copy of the object
  
  Logger.log("After function call: " + JSON.stringify(person));  // Logs {"name":"John","age":30} (unchanged)
}

function modifyObjectCopy(obj) {
  obj.age = 35;  // This modifies the copied object, not the original one
  Logger.log("Inside function: " + JSON.stringify(obj));  // Logs {"name":"John","age":35}
}
```

---

### 3. **Mixed Examples: Pass by Value and Reference Together**

You can also pass a mix of primitives (passed by value) and objects/arrays (passed by reference) to functions.

#### Example 3.1: Passing a Number and an Object

```javascript
function mixedPassExample() {
  var number = 10;
  var person = {name: "Alice", age: 25};
  
  Logger.log("Before function call: number = " + number + ", person = " + JSON.stringify(person));
  
  modifyMixed(number, person);
  
  Logger.log("After function call: number = " + number + ", person = " + JSON.stringify(person));  // number is unchanged, person is modified
}

function modifyMixed(num, obj) {
  num = 20;  // This change won't affect the original number (pass by value)
  obj.age = 30;  // This change will affect the original object (pass by reference)
  
  Logger.log("Inside function: num = " + num + ", person = " + JSON.stringify(obj));
}
```

#### Example 3.2: Passing a String and an Array

```javascript
function mixedStringArrayPass() {
  var text = "Google Apps Script";
  var arr = [5, 6, 7];
  
  Logger.log("Before function call: text = " + text + ", array = " + arr);
  
  modifyStringAndArray(text, arr);
  
  Logger.log("After function call: text = " + text + ", array = " + arr);  // text is unchanged, array is modified
}

function modifyStringAndArray(str, array) {
  str = "Changed";  // Does not affect the original string (pass by value)
  array.push(8);  // Affects the original array (pass by reference)
  
  Logger.log("Inside function: str = " + str + ", array = " + array);
}
```

What is “Pass by Value” in JavaScript?
Pass by Value means that when you pass a variable to a function, JavaScript creates a copy of the variable’s value and uses it inside the function. This means any changes made to the variable inside the function do not affect the original variable outside the function.

Example: In this example, we have shown a pass-by value.


function Passbyvalue(a, b) {
    let tmp;
    tmp = b;
    b = a;
    a = tmp;
    console.log(`Inside Pass by value 
        function -> a = ${a} b = ${b}`);
}

let a = 1;
let b = 2;
console.log(`Before calling Pass by value 
        Function -> a = ${a} b = ${b}`);

Passbyvalue(a, b);

console.log(`After calling Pass by value 
       Function -> a =${a} b = ${b}`);

Output
Before calling Pass by value 
        Function -> a = 1 b = 2
Inside Pass by value 
        function -> a = 2 b = 1
After calling Pass by value 
       Function -> a =1 b = 2
What is “Pass by Reference” in JavaScript?
Pass by Reference means that when you pass a variable (specifically, objects or arrays) to a function, JavaScript passes the reference or memory address of the variable, not a copy. This means any changes made to the variable inside the function will affect the original variable outside the function.

Example: In this example we have shown pass by reference.


function PassbyReference(obj) {
    let tmp = obj.a;
    obj.a = obj.b;
    obj.b = tmp;

    console.log(`Inside Pass By Reference 
        Function -> a = ${obj.a} b = ${obj.b}`);
}

let obj = {
    a: 10,
    b: 20

}
console.log(`Before calling Pass By Reference 
    Function -> a = ${obj.a} b = ${obj.b}`);

PassbyReference(obj)

console.log(`After calling Pass By Reference 
    Function -> a = ${obj.a} b = ${obj.b}`);

Output
Before calling Pass By Reference 
    Function -> a = 10 b = 20
Inside Pass By Reference 
        Function -> a = 20 b = 10
After calling Pass By Reference 
    Function -> a = 20 b = 10
Important Details About Pass by Reference
When working with objects or arrays, if you reassign the reference inside the function, it does not affect the original variable. However, modifying the contents (like adding or changing properties) will affect the original.

Example 1: Updating the object reference in the function.


function PassbyReference(obj) {

    // Changing the reference of the object
    obj = {
        a: 10,
        b: 20,
        c: "GEEKSFORGEEKS"
    }
    console.log(`Inside Pass by 
        Reference Function -> obj `);
        
    console.log(obj);
}

let obj = {
    a: 10,
    b: 20

}
console.log(`Updating the object reference -> `)
console.log(`Before calling Pass By 
        Reference Function -> obj`);
console.log(obj);

PassbyReference(obj)
console.log(`After calling Pass By 
        Reference Function -> obj`);
console.log(obj);

Output
Updating the object reference -> 
Before calling Pass By 
        Reference Function -> obj
{ a: 10, b: 20 }
Inside Pass by 
        Reference Function -> obj 
{ a: 10, b: 20, c: 'GEEKSFORGEEKS' }
Aft...
Example 2: Mutating the original Object.


function PassbyReference(obj) {

    // Mutating the original object 
    obj.c = "GEEKSFORGEEKS";
    console.log(`Inside Pass by
        Reference Function -> obj `);
    console.log(obj);
}

let obj = {
    a: 10,
    b: 20

}
console.log(`Mutating the original object -> `)
console.log(`Before calling Pass By
        Reference Function -> obj`);
console.log(obj);

PassbyReference(obj)
console.log(`After calling Pass By 
        Reference Function -> obj`);
console.log(obj);

Output
Mutating the original object -> 
Before calling Pass By
        Reference Function -> obj
{ a: 10, b: 20 }
Inside Pass by
        Reference Function -> obj 
{ a: 10, b: 20, c: 'GEEKSFORGEEKS' }
After ...
Understanding the difference between “Pass by Value” and “Pass by Reference” is crucial for effectively managing variables and data in JavaScript. It helps you predict how changes inside functions will affect your data, which is important for debugging and optimizing your code.





---

### Summary:
- **Pass by Value**: Primitives like numbers, strings, and booleans are passed by value. Changing the parameter inside the function does **not affect** the original variable.
- **Pass by Reference**: Complex types like arrays and objects are passed by reference. Changes made to the parameter inside the function **affect the original object**.
- You can use techniques like copying arrays or objects to prevent modifying the original data while still passing them into functions.

These examples give a thorough understanding of how both **Pass by Value** and **Pass by Reference** work in Google Apps Script.