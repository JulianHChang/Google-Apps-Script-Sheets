In Google Apps Script, interacting with ranges in Google Sheets is a common task. This involves reading from and writing to specific ranges of cells within a spreadsheet. Below is an exhaustive guide with examples for reading from and writing to ranges in Google Sheets using Apps Script.

### **1. Setting Up**

Before performing operations, you need to access a specific spreadsheet and its sheet.

#### Example 1.1: Accessing a Spreadsheet and Sheet
```javascript
function getSheet() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName('Sheet1'); // Replace 'Sheet1' with your sheet name
  return sheet;
}
```

### **2. Reading from a Range**

#### Example 2.1: Reading a Single Cell
```javascript
function readSingleCell() {
  var sheet = getSheet();
  var cellValue = sheet.getRange('A1').getValue();
  Logger.log(cellValue); // Logs the value in cell A1
}
```

#### Example 2.2: Reading a Range of Cells
```javascript
function readRange() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:B3');
  var values = range.getValues();
  
  // Logs the values in the range
  values.forEach(row => Logger.log(row));
}
```

#### Example 2.3: Reading a Range with Headers
```javascript
function readRangeWithHeaders() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:C4'); // Assuming the first row is headers
  var values = range.getValues();
  
  var headers = values[0]; // First row is headers
  var data = values.slice(1); // Remaining rows are data
  
  Logger.log('Headers: ' + headers);
  Logger.log('Data:');
  data.forEach(row => Logger.log(row));
}
```

### **3. Writing to a Range**

#### Example 3.1: Writing to a Single Cell
```javascript
function writeSingleCell() {
  var sheet = getSheet();
  sheet.getRange('A1').setValue('Hello, World!');
}
```

#### Example 3.2: Writing to a Range of Cells
```javascript
function writeRange() {
  var sheet = getSheet();
  var values = [
    ['Name', 'Age'],
    ['Alice', 30],
    ['Bob', 25]
  ];
  
  sheet.getRange('A1:B3').setValues(values);
}
```

#### Example 3.3: Writing Data with Formulas
```javascript
function writeRangeWithFormulas() {
  var sheet = getSheet();
  var formulas = [
    ['=SUM(1, 2)', '=A1+B2'],
    ['=AVERAGE(1, 2, 3)', '=A2+C1']
  ];
  
  sheet.getRange('A1:B2').setFormulas(formulas);
}
```

### **4. Appending Data**

#### Example 4.1: Appending Rows to the End of a Sheet
```javascript
function appendRow() {
  var sheet = getSheet();
  var newRow = ['Charlie', 28];
  
  sheet.appendRow(newRow);
}
```

### **5. Clearing Data**

#### Example 5.1: Clearing a Range
```javascript
function clearRange() {
  var sheet = getSheet();
  sheet.getRange('A1:B3').clearContent(); // Clears the content but keeps the formatting
}
```

#### Example 5.2: Clearing a Range and Formatting
```javascript
function clearRangeAndFormatting() {
  var sheet = getSheet();
  sheet.getRange('A1:B3').clear(); // Clears content and formatting
}
```

### **6. Formatting Ranges**

#### Example 6.1: Setting Font Size and Color
```javascript
function formatRange() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:B2');
  
  range.setFontSize(14);
  range.setFontColor('red');
}
```

#### Example 6.2: Setting Background Color
```javascript
function setBackgroundColor() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:B2');
  
  range.setBackground('yellow');
}
```

### **7. Advanced Operations**

#### Example 7.1: Merging Cells
```javascript
function mergeCells() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:B2');
  
  range.merge(); // Merges all cells in the range
}
```

#### Example 7.2: Adding Borders
```javascript
function addBorders() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:B2');
  
  range.setBorder(true, true, true, true, true, true);
}
```

#### Example 7.3: Setting Data Validation
```javascript
function setDataValidation() {
  var sheet = getSheet();
  var range = sheet.getRange('A1:A10');
  
  var rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(['Option 1', 'Option 2', 'Option 3'])
    .setAllowInvalid(false)
    .build();
  
  range.setDataValidation(rule);
}
```

### **8. Dynamic Range Selection**

#### Example 8.1: Getting a Range Based on Data
```javascript
function getDynamicRange() {
  var sheet = getSheet();
  var lastRow = sheet.getLastRow();
  var range = sheet.getRange('A1:B' + lastRow);
  
  var values = range.getValues();
  Logger.log(values);
}
```

### **Summary of Reading from and Writing to Ranges**

- **Reading Single Cell**: `getRange('A1').getValue()`
- **Reading Range**: `getRange('A1:B3').getValues()`
- **Writing Single Cell**: `getRange('A1').setValue('Text')`
- **Writing Range**: `getRange('A1:B3').setValues([['Data1', 'Data2'], ...])`
- **Appending Rows**: `appendRow(['Data1', 'Data2'])`
- **Clearing Range**: `getRange('A1:B3').clearContent()`
- **Formatting**: `setFontSize()`, `setFontColor()`, `setBackground()`
- **Advanced**: Merging cells, adding borders, setting data validation
- **Dynamic Range**: Adjust based on sheet content with `getLastRow()` and `getLastColumn()`

These examples should help you understand how to manipulate ranges in Google Sheets using Apps Script. Feel free to modify them according to your needs!